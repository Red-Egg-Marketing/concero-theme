"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _reactNative = require("react-native");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _compose = require("@wordpress/compose");

var _i18n = require("@wordpress/i18n");

var _styles = _interopRequireDefault(require("./styles.scss"));

var _navUpIcon = _interopRequireDefault(require("./nav-up-icon"));

var _breadcrumb = _interopRequireDefault(require("../block-list/breadcrumb.native"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var FloatingToolbar = function FloatingToolbar(_ref) {
  var selectedClientId = _ref.selectedClientId,
      parentId = _ref.parentId,
      showFloatingToolbar = _ref.showFloatingToolbar,
      onNavigateUp = _ref.onNavigateUp,
      isRTL = _ref.isRTL;
  return !!showFloatingToolbar && (0, _element.createElement)(_reactNative.TouchableWithoutFeedback, {
    accessible: false
  }, (0, _element.createElement)(_reactNative.View, {
    style: _styles.default.floatingToolbar
  }, !!parentId && (0, _element.createElement)(_components.Toolbar, {
    passedStyle: _styles.default.toolbar
  }, (0, _element.createElement)(_components.ToolbarButton, {
    title: (0, _i18n.__)('Navigate Up'),
    onClick: function onClick() {
      return onNavigateUp(parentId);
    },
    icon: (0, _element.createElement)(_navUpIcon.default, {
      isRTL: isRTL
    })
  }), (0, _element.createElement)(_reactNative.View, {
    style: _styles.default.pipe
  })), (0, _element.createElement)(_breadcrumb.default, {
    clientId: selectedClientId
  })));
};

var _default = (0, _compose.compose)([(0, _data.withSelect)(function (select) {
  var _select = select('core/block-editor'),
      getSelectedBlockClientId = _select.getSelectedBlockClientId,
      getBlockHierarchyRootClientId = _select.getBlockHierarchyRootClientId,
      getBlockRootClientId = _select.getBlockRootClientId,
      getBlockCount = _select.getBlockCount,
      getSettings = _select.getSettings;

  var selectedClientId = getSelectedBlockClientId();
  if (!selectedClientId) return;
  var rootBlockId = getBlockHierarchyRootClientId(selectedClientId);
  return {
    selectedClientId: selectedClientId,
    showFloatingToolbar: !!getBlockCount(rootBlockId),
    parentId: getBlockRootClientId(selectedClientId),
    isRTL: getSettings().isRTL
  };
}), (0, _data.withDispatch)(function (dispatch) {
  var _dispatch = dispatch('core/block-editor'),
      selectBlock = _dispatch.selectBlock;

  return {
    onNavigateUp: function onNavigateUp(clientId, initialPosition) {
      selectBlock(clientId, initialPosition);
    }
  };
})])(FloatingToolbar);

exports.default = _default;
//# sourceMappingURL=index.native.js.map