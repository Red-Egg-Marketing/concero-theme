"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _blocks2 = require("@wordpress/blocks");

var _dom = require("@wordpress/dom");

var _data = require("@wordpress/data");

var _getPasteEventData2 = require("../../utils/get-paste-event-data");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function CopyHandler(_ref) {
  var children = _ref.children;
  var containerRef = (0, _element.useRef)();

  var _useSelect = (0, _data.useSelect)(function (select) {
    return select('core/block-editor');
  }, []),
      getBlocksByClientId = _useSelect.getBlocksByClientId,
      getSelectedBlockClientIds = _useSelect.getSelectedBlockClientIds,
      hasMultiSelection = _useSelect.hasMultiSelection,
      getSettings = _useSelect.getSettings;

  var _useDispatch = (0, _data.useDispatch)('core/block-editor'),
      removeBlocks = _useDispatch.removeBlocks,
      replaceBlocks = _useDispatch.replaceBlocks;

  var _getSettings = getSettings(),
      canUserUseUnfilteredHTML = _getSettings.__experimentalCanUserUseUnfilteredHTML;

  var handler = function handler(event) {
    var selectedBlockClientIds = getSelectedBlockClientIds();

    if (selectedBlockClientIds.length === 0) {
      return;
    } // Always handle multiple selected blocks.
    // Let native copy behaviour take over in input fields.


    if (!hasMultiSelection() && (0, _dom.documentHasSelection)()) {
      return;
    }

    if (!containerRef.current.contains(event.target)) {
      return;
    }

    event.preventDefault();

    if (event.type === 'copy' || event.type === 'cut') {
      var blocks = getBlocksByClientId(selectedBlockClientIds);
      var serialized = (0, _blocks2.serialize)(blocks);
      event.clipboardData.setData('text/plain', serialized);
      event.clipboardData.setData('text/html', serialized);
    }

    if (event.type === 'cut') {
      removeBlocks(selectedBlockClientIds);
    } else if (event.type === 'paste') {
      var _getPasteEventData = (0, _getPasteEventData2.getPasteEventData)(event),
          plainText = _getPasteEventData.plainText,
          html = _getPasteEventData.html;

      var _blocks = (0, _blocks2.pasteHandler)({
        HTML: html,
        plainText: plainText,
        mode: 'BLOCKS',
        canUserUseUnfilteredHTML: canUserUseUnfilteredHTML
      });

      replaceBlocks(selectedBlockClientIds, _blocks, _blocks.length - 1, -1);
    }
  };

  return (0, _element.createElement)("div", {
    ref: containerRef,
    onCopy: handler,
    onCut: handler,
    onPaste: handler
  }, children);
}

var _default = CopyHandler;
exports.default = _default;
//# sourceMappingURL=index.js.map