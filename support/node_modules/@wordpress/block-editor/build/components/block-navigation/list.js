"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BlockNavigationListWrapper;
exports.BlockNavigationContext = void 0;

var _element = require("@wordpress/element");

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _lodash = require("lodash");

var _buttonBlockAppender = _interopRequireDefault(require("../button-block-appender"));

var _branch = _interopRequireDefault(require("./branch"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var BlockNavigationContext = (0, _element.createContext)({
  __experimentalWithBlockNavigationSlots: false
});
exports.BlockNavigationContext = BlockNavigationContext;

function BlockNavigationList(_ref) {
  var blocks = _ref.blocks,
      selectedBlockClientId = _ref.selectedBlockClientId,
      selectBlock = _ref.selectBlock,
      showAppender = _ref.showAppender,
      showNestedBlocks = _ref.showNestedBlocks,
      parentBlockClientId = _ref.parentBlockClientId;
  var shouldShowAppender = showAppender && !!parentBlockClientId;
  return (
    /*
     * Disable reason: The `list` ARIA role is redundant but
     * Safari+VoiceOver won't announce the list otherwise.
     */

    /* eslint-disable jsx-a11y/no-redundant-roles */
    (0, _element.createElement)("ul", {
      className: "block-editor-block-navigation__list",
      role: "list"
    }, (0, _lodash.map)((0, _lodash.omitBy)(blocks, _lodash.isNil), function (block) {
      var isSelected = block.clientId === selectedBlockClientId;
      return (0, _element.createElement)(_branch.default, {
        block: block,
        key: block.clientId,
        isSelected: isSelected,
        onClick: function onClick() {
          return selectBlock(block.clientId);
        }
      }, showNestedBlocks && !!block.innerBlocks && !!block.innerBlocks.length && (0, _element.createElement)(BlockNavigationList, {
        blocks: block.innerBlocks,
        selectedBlockClientId: selectedBlockClientId,
        selectBlock: selectBlock,
        parentBlockClientId: block.clientId,
        showAppender: showAppender,
        showNestedBlocks: true
      }));
    }), shouldShowAppender && (0, _element.createElement)("li", null, (0, _element.createElement)("div", {
      className: "block-editor-block-navigation__item"
    }, (0, _element.createElement)(_buttonBlockAppender.default, {
      rootClientId: parentBlockClientId,
      __experimentalSelectBlockOnInsert: false
    }))))
    /* eslint-enable jsx-a11y/no-redundant-roles */

  );
}

BlockNavigationList.defaultProps = {
  selectBlock: function selectBlock() {}
};

function BlockNavigationListWrapper(_ref2) {
  var __experimentalWithBlockNavigationSlots = _ref2.__experimentalWithBlockNavigationSlots,
      props = (0, _objectWithoutProperties2.default)(_ref2, ["__experimentalWithBlockNavigationSlots"]);
  var blockNavigationContext = (0, _element.useMemo)(function () {
    return {
      __experimentalWithBlockNavigationSlots: __experimentalWithBlockNavigationSlots
    };
  }, [__experimentalWithBlockNavigationSlots]);
  return (0, _element.createElement)(BlockNavigationContext.Provider, {
    value: blockNavigationContext
  }, (0, _element.createElement)(BlockNavigationList, props));
}
//# sourceMappingURL=list.js.map