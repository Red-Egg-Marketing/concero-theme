"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _lodash = require("lodash");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _data = require("@wordpress/data");

var _compose = require("@wordpress/compose");

var _icons = require("@wordpress/icons");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */
var horizontalMover = {
  backwardButtonIcon: _icons.arrowLeft,
  forwardButtonIcon: _icons.arrowRight,
  backwardButtonHint: (0, _i18n.__)('Double tap to move the block to the left'),
  forwardButtonHint: (0, _i18n.__)('Double tap to move the block to the right'),
  firstBlockTitle: (0, _i18n.__)('Move block left'),
  lastBlockTitle: (0, _i18n.__)('Move block right'),

  /* translators: accessibility text. %1: current block position (number). %2: next block position (number) */
  backwardButtonTitle: (0, _i18n.__)('Move block left from position %1$s to position %2$s'),

  /* translators: accessibility text. %1: current block position (number). %2: next block position (number) */
  forwardButtonTitle: (0, _i18n.__)('Move block right from position %1$s to position %2$s')
};
var verticalMover = {
  backwardButtonIcon: _icons.arrowUp,
  forwardButtonIcon: _icons.arrowDown,
  backwardButtonHint: (0, _i18n.__)('Double tap to move the block up'),
  forwardButtonHint: (0, _i18n.__)('Double tap to move the block down'),
  firstBlockTitle: (0, _i18n.__)('Move block up'),
  lastBlockTitle: (0, _i18n.__)('Move block down'),

  /* translators: accessibility text. %1: current block position (number). %2: next block position (number) */
  backwardButtonTitle: (0, _i18n.__)('Move block up from row %1$s to row %2$s'),

  /* translators: accessibility text. %1: current block position (number). %2: next block position (number) */
  forwardButtonTitle: (0, _i18n.__)('Move block down from row %1$s to row %2$s')
};

var BlockMover = function BlockMover(_ref) {
  var isFirst = _ref.isFirst,
      isLast = _ref.isLast,
      isRTL = _ref.isRTL,
      isLocked = _ref.isLocked,
      onMoveDown = _ref.onMoveDown,
      onMoveUp = _ref.onMoveUp,
      firstIndex = _ref.firstIndex,
      rootClientId = _ref.rootClientId,
      isStackedHorizontally = _ref.isStackedHorizontally;

  var _ref2 = isStackedHorizontally ? horizontalMover : verticalMover,
      backwardButtonIcon = _ref2.backwardButtonIcon,
      forwardButtonIcon = _ref2.forwardButtonIcon,
      backwardButtonHint = _ref2.backwardButtonHint,
      forwardButtonHint = _ref2.forwardButtonHint,
      firstBlockTitle = _ref2.firstBlockTitle,
      lastBlockTitle = _ref2.lastBlockTitle;

  if (isLocked || isFirst && isLast && !rootClientId) {
    return null;
  }

  var switchButtonPropIfRTL = function switchButtonPropIfRTL(isBackwardButton, forwardButtonProp, backwardButtonProp) {
    if (isRTL && isStackedHorizontally) {
      // for RTL and horizontal direction switch prop between forward and backward button
      if (isBackwardButton) {
        return forwardButtonProp; // set forwardButtonProp for backward button
      }

      return backwardButtonProp; // set backwardButtonProp for forward button
    }

    return isBackwardButton ? backwardButtonProp : forwardButtonProp;
  };

  var getMoverButtonTitle = function getMoverButtonTitle(isBackwardButton) {
    var fromIndex = firstIndex + 1; // current position based on index
    // for backwardButton decrease index (move left/up) for forwardButton increase index (move right/down)

    var direction = isBackwardButton ? -1 : 1;
    var toIndex = fromIndex + direction; // position after move

    var _ref3 = isStackedHorizontally ? horizontalMover : verticalMover,
        backwardButtonTitle = _ref3.backwardButtonTitle,
        forwardButtonTitle = _ref3.forwardButtonTitle;

    var buttonTitle = switchButtonPropIfRTL(isBackwardButton, forwardButtonTitle, backwardButtonTitle);
    return (0, _i18n.sprintf)(buttonTitle, fromIndex, toIndex);
  };

  var getArrowIcon = function getArrowIcon(isBackwardButton) {
    return switchButtonPropIfRTL(isBackwardButton, forwardButtonIcon, backwardButtonIcon);
  };

  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.ToolbarButton, {
    title: !isFirst ? getMoverButtonTitle(true) : firstBlockTitle,
    isDisabled: isFirst,
    onClick: onMoveUp,
    icon: getArrowIcon(true),
    extraProps: {
      hint: backwardButtonHint
    }
  }), (0, _element.createElement)(_components.ToolbarButton, {
    title: !isLast ? getMoverButtonTitle() : lastBlockTitle,
    isDisabled: isLast,
    onClick: onMoveDown,
    icon: getArrowIcon(),
    extraProps: {
      hint: forwardButtonHint
    }
  }));
};

var _default = (0, _compose.compose)((0, _data.withSelect)(function (select, _ref4) {
  var clientIds = _ref4.clientIds;

  var _select = select('core/block-editor'),
      getBlockIndex = _select.getBlockIndex,
      getTemplateLock = _select.getTemplateLock,
      getBlockRootClientId = _select.getBlockRootClientId,
      getBlockOrder = _select.getBlockOrder,
      getSettings = _select.getSettings;

  var normalizedClientIds = (0, _lodash.castArray)(clientIds);
  var firstClientId = (0, _lodash.first)(normalizedClientIds);
  var rootClientId = getBlockRootClientId(firstClientId);
  var blockOrder = getBlockOrder(rootClientId);
  var firstIndex = getBlockIndex(firstClientId, rootClientId);
  var lastIndex = getBlockIndex((0, _lodash.last)(normalizedClientIds), rootClientId);
  return {
    firstIndex: firstIndex,
    isFirst: firstIndex === 0,
    isLast: lastIndex === blockOrder.length - 1,
    isRTL: getSettings().isRTL,
    isLocked: getTemplateLock(rootClientId) === 'all',
    rootClientId: rootClientId
  };
}), (0, _data.withDispatch)(function (dispatch, _ref5) {
  var clientIds = _ref5.clientIds,
      rootClientId = _ref5.rootClientId;

  var _dispatch = dispatch('core/block-editor'),
      moveBlocksDown = _dispatch.moveBlocksDown,
      moveBlocksUp = _dispatch.moveBlocksUp;

  return {
    onMoveDown: (0, _lodash.partial)(moveBlocksDown, clientIds, rootClientId),
    onMoveUp: (0, _lodash.partial)(moveBlocksUp, clientIds, rootClientId)
  };
}), _compose.withInstanceId)(BlockMover);

exports.default = _default;
//# sourceMappingURL=index.native.js.map