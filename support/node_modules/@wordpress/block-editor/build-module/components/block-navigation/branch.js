import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { createElement } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * WordPress dependencies
 */
import { Children, cloneElement, useContext } from '@wordpress/element';
import { Fill, Slot } from '@wordpress/components';
/**
 * Internal dependencies
 */

import BlockNavigationListItem from './list-item';
import { BlockNavigationContext } from './list';
import { BlockListBlockContext } from '../block-list/block';

var BlockNavigationBranch = function BlockNavigationBranch(_ref) {
  var children = _ref.children,
      props = _objectWithoutProperties(_ref, ["children"]);

  var _useContext = useContext(BlockNavigationContext),
      __experimentalWithBlockNavigationSlots = _useContext.__experimentalWithBlockNavigationSlots;

  if (!__experimentalWithBlockNavigationSlots) {
    return createElement("li", null, createElement(BlockNavigationListItem, props), children);
  }

  return createElement("li", null, createElement(BlockNavigationListItemSlot, {
    blockId: props.block.clientId
  }, function (fills) {
    if (!fills.length) {
      return createElement(BlockNavigationListItem, props);
    }

    return Children.map(fills, function (fill) {
      return cloneElement(fill, _objectSpread({}, props, {}, fill.props));
    });
  }), children);
};

export default BlockNavigationBranch;

var listItemSlotName = function listItemSlotName(blockId) {
  return "BlockNavigationList-item-".concat(blockId);
};

export var BlockNavigationListItemSlot = function BlockNavigationListItemSlot(_ref2) {
  var blockId = _ref2.blockId,
      props = _objectWithoutProperties(_ref2, ["blockId"]);

  return createElement(Slot, _extends({}, props, {
    name: listItemSlotName(blockId)
  }));
};
export var BlockNavigationListItemFill = function BlockNavigationListItemFill(props) {
  var _useContext2 = useContext(BlockListBlockContext),
      clientId = _useContext2.clientId;

  return createElement(Fill, _extends({}, props, {
    name: listItemSlotName(clientId)
  }));
};
//# sourceMappingURL=branch.js.map