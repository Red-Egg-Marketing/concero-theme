import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { isNil, map, omitBy } from 'lodash';
/**
 * WordPress dependencies
 */

import { useMemo, createContext } from '@wordpress/element';
/**
 * Internal dependencies
 */

import ButtonBlockAppender from '../button-block-appender';
import BlockNavigationBranch from './branch';
export var BlockNavigationContext = createContext({
  __experimentalWithBlockNavigationSlots: false
});

function BlockNavigationList(_ref) {
  var blocks = _ref.blocks,
      selectedBlockClientId = _ref.selectedBlockClientId,
      selectBlock = _ref.selectBlock,
      showAppender = _ref.showAppender,
      showNestedBlocks = _ref.showNestedBlocks,
      parentBlockClientId = _ref.parentBlockClientId;
  var shouldShowAppender = showAppender && !!parentBlockClientId;
  return (
    /*
     * Disable reason: The `list` ARIA role is redundant but
     * Safari+VoiceOver won't announce the list otherwise.
     */

    /* eslint-disable jsx-a11y/no-redundant-roles */
    createElement("ul", {
      className: "block-editor-block-navigation__list",
      role: "list"
    }, map(omitBy(blocks, isNil), function (block) {
      var isSelected = block.clientId === selectedBlockClientId;
      return createElement(BlockNavigationBranch, {
        block: block,
        key: block.clientId,
        isSelected: isSelected,
        onClick: function onClick() {
          return selectBlock(block.clientId);
        }
      }, showNestedBlocks && !!block.innerBlocks && !!block.innerBlocks.length && createElement(BlockNavigationList, {
        blocks: block.innerBlocks,
        selectedBlockClientId: selectedBlockClientId,
        selectBlock: selectBlock,
        parentBlockClientId: block.clientId,
        showAppender: showAppender,
        showNestedBlocks: true
      }));
    }), shouldShowAppender && createElement("li", null, createElement("div", {
      className: "block-editor-block-navigation__item"
    }, createElement(ButtonBlockAppender, {
      rootClientId: parentBlockClientId,
      __experimentalSelectBlockOnInsert: false
    }))))
    /* eslint-enable jsx-a11y/no-redundant-roles */

  );
}

BlockNavigationList.defaultProps = {
  selectBlock: function selectBlock() {}
};
export default function BlockNavigationListWrapper(_ref2) {
  var __experimentalWithBlockNavigationSlots = _ref2.__experimentalWithBlockNavigationSlots,
      props = _objectWithoutProperties(_ref2, ["__experimentalWithBlockNavigationSlots"]);

  var blockNavigationContext = useMemo(function () {
    return {
      __experimentalWithBlockNavigationSlots: __experimentalWithBlockNavigationSlots
    };
  }, [__experimentalWithBlockNavigationSlots]);
  return createElement(BlockNavigationContext.Provider, {
    value: blockNavigationContext
  }, createElement(BlockNavigationList, props));
}
//# sourceMappingURL=list.js.map