import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useRef } from '@wordpress/element';
import { serialize, pasteHandler } from '@wordpress/blocks';
import { documentHasSelection } from '@wordpress/dom';
import { useDispatch, useSelect } from '@wordpress/data';
/**
 * Internal dependencies
 */

import { getPasteEventData } from '../../utils/get-paste-event-data';

function CopyHandler(_ref) {
  var children = _ref.children;
  var containerRef = useRef();

  var _useSelect = useSelect(function (select) {
    return select('core/block-editor');
  }, []),
      getBlocksByClientId = _useSelect.getBlocksByClientId,
      getSelectedBlockClientIds = _useSelect.getSelectedBlockClientIds,
      hasMultiSelection = _useSelect.hasMultiSelection,
      getSettings = _useSelect.getSettings;

  var _useDispatch = useDispatch('core/block-editor'),
      removeBlocks = _useDispatch.removeBlocks,
      replaceBlocks = _useDispatch.replaceBlocks;

  var _getSettings = getSettings(),
      canUserUseUnfilteredHTML = _getSettings.__experimentalCanUserUseUnfilteredHTML;

  var handler = function handler(event) {
    var selectedBlockClientIds = getSelectedBlockClientIds();

    if (selectedBlockClientIds.length === 0) {
      return;
    } // Always handle multiple selected blocks.
    // Let native copy behaviour take over in input fields.


    if (!hasMultiSelection() && documentHasSelection()) {
      return;
    }

    if (!containerRef.current.contains(event.target)) {
      return;
    }

    event.preventDefault();

    if (event.type === 'copy' || event.type === 'cut') {
      var blocks = getBlocksByClientId(selectedBlockClientIds);
      var serialized = serialize(blocks);
      event.clipboardData.setData('text/plain', serialized);
      event.clipboardData.setData('text/html', serialized);
    }

    if (event.type === 'cut') {
      removeBlocks(selectedBlockClientIds);
    } else if (event.type === 'paste') {
      var _getPasteEventData = getPasteEventData(event),
          plainText = _getPasteEventData.plainText,
          html = _getPasteEventData.html;

      var _blocks = pasteHandler({
        HTML: html,
        plainText: plainText,
        mode: 'BLOCKS',
        canUserUseUnfilteredHTML: canUserUseUnfilteredHTML
      });

      replaceBlocks(selectedBlockClientIds, _blocks, _blocks.length - 1, -1);
    }
  };

  return createElement("div", {
    ref: containerRef,
    onCopy: handler,
    onCut: handler,
    onPaste: handler
  }, children);
}

export default CopyHandler;
//# sourceMappingURL=index.js.map