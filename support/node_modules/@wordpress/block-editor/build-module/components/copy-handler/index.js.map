{"version":3,"sources":["@wordpress/block-editor/src/components/copy-handler/index.js"],"names":["useRef","serialize","pasteHandler","documentHasSelection","useDispatch","useSelect","getPasteEventData","CopyHandler","children","containerRef","select","getBlocksByClientId","getSelectedBlockClientIds","hasMultiSelection","getSettings","removeBlocks","replaceBlocks","canUserUseUnfilteredHTML","__experimentalCanUserUseUnfilteredHTML","handler","event","selectedBlockClientIds","length","current","contains","target","preventDefault","type","blocks","serialized","clipboardData","setData","plainText","html","HTML","mode"],"mappings":";;AAAA;;;AAGA,SAASA,MAAT,QAAuB,oBAAvB;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,mBAAxC;AACA,SAASC,oBAAT,QAAqC,gBAArC;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,iBAAvC;AAEA;;;;AAGA,SAASC,iBAAT,QAAkC,kCAAlC;;AAEA,SAASC,WAAT,OAAqC;AAAA,MAAbC,QAAa,QAAbA,QAAa;AACpC,MAAMC,YAAY,GAAGT,MAAM,EAA3B;;AADoC,mBAQhCK,SAAS,CAAE,UAAEK,MAAF;AAAA,WAAcA,MAAM,CAAE,mBAAF,CAApB;AAAA,GAAF,EAA+C,EAA/C,CARuB;AAAA,MAInCC,mBAJmC,cAInCA,mBAJmC;AAAA,MAKnCC,yBALmC,cAKnCA,yBALmC;AAAA,MAMnCC,iBANmC,cAMnCA,iBANmC;AAAA,MAOnCC,WAPmC,cAOnCA,WAPmC;;AAAA,qBAUIV,WAAW,CAAE,mBAAF,CAVf;AAAA,MAU5BW,YAV4B,gBAU5BA,YAV4B;AAAA,MAUdC,aAVc,gBAUdA,aAVc;;AAAA,qBAchCF,WAAW,EAdqB;AAAA,MAaKG,wBAbL,gBAanCC,sCAbmC;;AAgBpC,MAAMC,OAAO,GAAG,SAAVA,OAAU,CAAEC,KAAF,EAAa;AAC5B,QAAMC,sBAAsB,GAAGT,yBAAyB,EAAxD;;AAEA,QAAKS,sBAAsB,CAACC,MAAvB,KAAkC,CAAvC,EAA2C;AAC1C;AACA,KAL2B,CAO5B;AACA;;;AACA,QAAK,CAAET,iBAAiB,EAAnB,IAAyBV,oBAAoB,EAAlD,EAAuD;AACtD;AACA;;AAED,QAAK,CAAEM,YAAY,CAACc,OAAb,CAAqBC,QAArB,CAA+BJ,KAAK,CAACK,MAArC,CAAP,EAAuD;AACtD;AACA;;AACDL,IAAAA,KAAK,CAACM,cAAN;;AAEA,QAAKN,KAAK,CAACO,IAAN,KAAe,MAAf,IAAyBP,KAAK,CAACO,IAAN,KAAe,KAA7C,EAAqD;AACpD,UAAMC,MAAM,GAAGjB,mBAAmB,CAAEU,sBAAF,CAAlC;AACA,UAAMQ,UAAU,GAAG5B,SAAS,CAAE2B,MAAF,CAA5B;AAEAR,MAAAA,KAAK,CAACU,aAAN,CAAoBC,OAApB,CAA6B,YAA7B,EAA2CF,UAA3C;AACAT,MAAAA,KAAK,CAACU,aAAN,CAAoBC,OAApB,CAA6B,WAA7B,EAA0CF,UAA1C;AACA;;AAED,QAAKT,KAAK,CAACO,IAAN,KAAe,KAApB,EAA4B;AAC3BZ,MAAAA,YAAY,CAAEM,sBAAF,CAAZ;AACA,KAFD,MAEO,IAAKD,KAAK,CAACO,IAAN,KAAe,OAApB,EAA8B;AAAA,+BACRrB,iBAAiB,CAAEc,KAAF,CADT;AAAA,UAC5BY,SAD4B,sBAC5BA,SAD4B;AAAA,UACjBC,IADiB,sBACjBA,IADiB;;AAEpC,UAAML,OAAM,GAAG1B,YAAY,CAAE;AAC5BgC,QAAAA,IAAI,EAAED,IADsB;AAE5BD,QAAAA,SAAS,EAATA,SAF4B;AAG5BG,QAAAA,IAAI,EAAE,QAHsB;AAI5BlB,QAAAA,wBAAwB,EAAxBA;AAJ4B,OAAF,CAA3B;;AAOAD,MAAAA,aAAa,CACZK,sBADY,EAEZO,OAFY,EAGZA,OAAM,CAACN,MAAP,GAAgB,CAHJ,EAIZ,CAAC,CAJW,CAAb;AAMA;AACD,GA5CD;;AA8CA,SACC;AACC,IAAA,GAAG,EAAGb,YADP;AAEC,IAAA,MAAM,EAAGU,OAFV;AAGC,IAAA,KAAK,EAAGA,OAHT;AAIC,IAAA,OAAO,EAAGA;AAJX,KAMGX,QANH,CADD;AAUA;;AAED,eAAeD,WAAf","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useRef } from '@wordpress/element';\nimport { serialize, pasteHandler } from '@wordpress/blocks';\nimport { documentHasSelection } from '@wordpress/dom';\nimport { useDispatch, useSelect } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { getPasteEventData } from '../../utils/get-paste-event-data';\n\nfunction CopyHandler( { children } ) {\n\tconst containerRef = useRef();\n\n\tconst {\n\t\tgetBlocksByClientId,\n\t\tgetSelectedBlockClientIds,\n\t\thasMultiSelection,\n\t\tgetSettings,\n\t} = useSelect( ( select ) => select( 'core/block-editor' ), [] );\n\n\tconst { removeBlocks, replaceBlocks } = useDispatch( 'core/block-editor' );\n\n\tconst {\n\t\t__experimentalCanUserUseUnfilteredHTML: canUserUseUnfilteredHTML,\n\t} = getSettings();\n\n\tconst handler = ( event ) => {\n\t\tconst selectedBlockClientIds = getSelectedBlockClientIds();\n\n\t\tif ( selectedBlockClientIds.length === 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Always handle multiple selected blocks.\n\t\t// Let native copy behaviour take over in input fields.\n\t\tif ( ! hasMultiSelection() && documentHasSelection() ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ! containerRef.current.contains( event.target ) ) {\n\t\t\treturn;\n\t\t}\n\t\tevent.preventDefault();\n\n\t\tif ( event.type === 'copy' || event.type === 'cut' ) {\n\t\t\tconst blocks = getBlocksByClientId( selectedBlockClientIds );\n\t\t\tconst serialized = serialize( blocks );\n\n\t\t\tevent.clipboardData.setData( 'text/plain', serialized );\n\t\t\tevent.clipboardData.setData( 'text/html', serialized );\n\t\t}\n\n\t\tif ( event.type === 'cut' ) {\n\t\t\tremoveBlocks( selectedBlockClientIds );\n\t\t} else if ( event.type === 'paste' ) {\n\t\t\tconst { plainText, html } = getPasteEventData( event );\n\t\t\tconst blocks = pasteHandler( {\n\t\t\t\tHTML: html,\n\t\t\t\tplainText,\n\t\t\t\tmode: 'BLOCKS',\n\t\t\t\tcanUserUseUnfilteredHTML,\n\t\t\t} );\n\n\t\t\treplaceBlocks(\n\t\t\t\tselectedBlockClientIds,\n\t\t\t\tblocks,\n\t\t\t\tblocks.length - 1,\n\t\t\t\t-1\n\t\t\t);\n\t\t}\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tref={ containerRef }\n\t\t\tonCopy={ handler }\n\t\t\tonCut={ handler }\n\t\t\tonPaste={ handler }\n\t\t>\n\t\t\t{ children }\n\t\t</div>\n\t);\n}\n\nexport default CopyHandler;\n"]}