import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { View, TouchableWithoutFeedback } from 'react-native';
/**
 * WordPress dependencies
 */

import { ToolbarButton, Toolbar } from '@wordpress/components';
import { withSelect, withDispatch } from '@wordpress/data';
import { compose } from '@wordpress/compose';
import { __ } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import styles from './styles.scss';
import NavigateUpSVG from './nav-up-icon';
import Breadcrumb from '../block-list/breadcrumb.native';

var FloatingToolbar = function FloatingToolbar(_ref) {
  var selectedClientId = _ref.selectedClientId,
      parentId = _ref.parentId,
      showFloatingToolbar = _ref.showFloatingToolbar,
      onNavigateUp = _ref.onNavigateUp,
      isRTL = _ref.isRTL;
  return !!showFloatingToolbar && createElement(TouchableWithoutFeedback, {
    accessible: false
  }, createElement(View, {
    style: styles.floatingToolbar
  }, !!parentId && createElement(Toolbar, {
    passedStyle: styles.toolbar
  }, createElement(ToolbarButton, {
    title: __('Navigate Up'),
    onClick: function onClick() {
      return onNavigateUp(parentId);
    },
    icon: createElement(NavigateUpSVG, {
      isRTL: isRTL
    })
  }), createElement(View, {
    style: styles.pipe
  })), createElement(Breadcrumb, {
    clientId: selectedClientId
  })));
};

export default compose([withSelect(function (select) {
  var _select = select('core/block-editor'),
      getSelectedBlockClientId = _select.getSelectedBlockClientId,
      getBlockHierarchyRootClientId = _select.getBlockHierarchyRootClientId,
      getBlockRootClientId = _select.getBlockRootClientId,
      getBlockCount = _select.getBlockCount,
      getSettings = _select.getSettings;

  var selectedClientId = getSelectedBlockClientId();
  if (!selectedClientId) return;
  var rootBlockId = getBlockHierarchyRootClientId(selectedClientId);
  return {
    selectedClientId: selectedClientId,
    showFloatingToolbar: !!getBlockCount(rootBlockId),
    parentId: getBlockRootClientId(selectedClientId),
    isRTL: getSettings().isRTL
  };
}), withDispatch(function (dispatch) {
  var _dispatch = dispatch('core/block-editor'),
      selectBlock = _dispatch.selectBlock;

  return {
    onNavigateUp: function onNavigateUp(clientId, initialPosition) {
      selectBlock(clientId, initialPosition);
    }
  };
})])(FloatingToolbar);
//# sourceMappingURL=index.native.js.map