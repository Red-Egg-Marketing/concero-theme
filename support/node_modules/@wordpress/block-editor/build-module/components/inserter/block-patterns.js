import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { map } from 'lodash';
/**
 * WordPress dependencies
 */

import { useMemo, useCallback } from '@wordpress/element';
import { parse, cloneBlock } from '@wordpress/blocks';
import { useDispatch } from '@wordpress/data';
import { ENTER, SPACE } from '@wordpress/keycodes';
import { __, sprintf, _x } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import BlockPreview from '../block-preview';
import useAsyncList from './use-async-list';
import InserterPanel from './panel';
import { searchItems } from './search-items';
import InserterNoResults from './no-results';

function BlockPattern(_ref) {
  var pattern = _ref.pattern,
      _onClick = _ref.onClick;
  var content = pattern.content;
  var blocks = useMemo(function () {
    return parse(content);
  }, [content]);
  return createElement("div", {
    className: "block-editor-inserter__patterns-item",
    role: "button",
    onClick: function onClick() {
      return _onClick(pattern, blocks);
    },
    onKeyDown: function onKeyDown(event) {
      if (ENTER === event.keyCode || SPACE === event.keyCode) {
        _onClick(pattern, blocks);
      }
    },
    tabIndex: 0,
    "aria-label": pattern.title
  }, createElement(BlockPreview, {
    blocks: blocks
  }), createElement("div", {
    className: "block-editor-inserter__patterns-item-title"
  }, pattern.title));
}

function BlockPatternPlaceholder() {
  return createElement("div", {
    className: "block-editor-inserter__patterns-item is-placeholder"
  });
}

function BlockPatterns(_ref2) {
  var patterns = _ref2.patterns,
      onInsert = _ref2.onInsert,
      filterValue = _ref2.filterValue;
  var filteredPatterns = useMemo(function () {
    return searchItems(patterns, filterValue);
  }, [filterValue, patterns]);
  var currentShownPatterns = useAsyncList(filteredPatterns);

  var _useDispatch = useDispatch('core/notices'),
      createSuccessNotice = _useDispatch.createSuccessNotice;

  var onClickPattern = useCallback(function (pattern, blocks) {
    onInsert(map(blocks, function (block) {
      return cloneBlock(block);
    }));
    createSuccessNotice(sprintf(
    /* translators: %s: block pattern title. */
    __('Pattern "%s" inserted.'), pattern.title), {
      type: 'snackbar'
    });
  }, []);
  return !!filteredPatterns.length ? createElement(InserterPanel, {
    title: filterValue ? __('Search Results') : _x('All', 'patterns categories')
  }, filteredPatterns.map(function (pattern, index) {
    return currentShownPatterns[index] === pattern ? createElement(BlockPattern, {
      key: pattern.name,
      pattern: pattern,
      onClick: onClickPattern
    }) : createElement(BlockPatternPlaceholder, {
      key: pattern.name
    });
  })) : createElement(InserterNoResults, null);
}

export default BlockPatterns;
//# sourceMappingURL=block-patterns.js.map